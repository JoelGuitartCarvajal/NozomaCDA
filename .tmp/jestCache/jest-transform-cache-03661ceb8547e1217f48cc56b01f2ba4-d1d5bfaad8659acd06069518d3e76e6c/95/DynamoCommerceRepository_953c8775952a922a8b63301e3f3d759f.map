{"file":"/home/patrick/Downloads/NozomaCDA/src/contexts/backoffice/commerces/infra/persistence/dynamodb/DynamoCommerceRepository.ts","mappings":";;;;;AAGA,8FAAsE;AAKtE,MAAM,UAAU,GAAG,CAAC,EAAU,EAAE,EAAE,CAAC,WAAW,GAAG,EAAE,CAAC,QAAQ,EAAE,CAAC;AAC/D,MAAqB,wBAAwB;IACzC,YAAoB,MAAsB,EAAW,SAAiB,EAAW,UAAkB;QAA/E,WAAM,GAAN,MAAM,CAAgB;QAAW,cAAS,GAAT,SAAS,CAAQ;QAAW,eAAU,GAAV,UAAU,CAAQ;IACnG,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,QAAkB;QAC3B,MAAM,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAA;QACnC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;YACrB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,kBACC,YAAY,EAAE,GAAG,IACd,QAAQ,CAAC,YAAY,EAAE,CAC7B;SACJ,CAAC;aACG,OAAO,EAAE,CAAA;IAClB,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,KAAc;;QAC5B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;YACjC,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,UAAU;YAC1B,sBAAsB,EAAE,gBAAgB;YACxC,yBAAyB,EAAE;gBACvB,QAAQ,EAAE,KAAK,CAAC,KAAK;aACxB;SACJ,CAAC;aACG,OAAO,EAAE,CAAC;QACf,OAAO,CAAA,MAAA,IAAI,CAAC,KAAK,0CAAE,MAAM,EAAC,CAAC,CAAC,kBAAQ,CAAC,cAAc,mBAExC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAuB,EAE7C,CAAC,CAAC,CAAC,IAAI,CAAC;IACb,CAAC;IAED,6DAA6D;IAC7D,KAAK,CAAC,QAAQ,CAAC,EAAU;QACrB,MAAM,GAAG,GAAG,UAAU,CAAC,EAAE,CAAC,EACtB,IAAI,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,GAAG,EAAE;gBACD,YAAY,EAAE,GAAG;aACpB;SACJ,CAAC;aACG,OAAO,EAAE,CAAC;QACnB,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAQ,CAAC,cAAc,CAAC,kBAAK,IAAI,CAAC,IAAI,CAAwB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC9F,CAAC;IAED,KAAK,CAAC,IAAI,CAAC,QAAkB;QACzB,MAAM,GAAG,GAAG,UAAU,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QACpC,MAAM,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;YAClB,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,IAAI,kBACA,YAAY,EAAE,GAAG,IACd,QAAQ,CAAC,YAAY,EAAE,CAC7B;SACJ,CAAC;aACG,OAAO,EAAE,CAAC;IACnB,CAAC;CAEJ;AA1DD,2CA0DC","names":[],"sources":["/home/patrick/Downloads/NozomaCDA/src/contexts/backoffice/commerces/infra/persistence/dynamodb/DynamoCommerceRepository.ts"],"sourcesContent":["import { CommerceRepository } from \"@backoffice-contexts/commerces/domain/CommerceRepository\";\nimport EmailVo from \"@shared/domain/EmailVo\";\nimport { Nullable } from \"@shared/domain/Nullable\";\nimport Commerce from \"@backoffice-contexts/commerces/domain/Commerce\";\nimport UuidVo from \"@shared/domain/UuidVo\";\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nimport { CommercePrimitives } from \"@backoffice-contexts/commerces/domain/CommercePrimitives\";\n\nconst composeKey = (id: UuidVo) => \"commerce:\" + id.toString();\nexport default class DynamoCommerceRepository implements CommerceRepository {\n    constructor(private client: DocumentClient, readonly tableName: string, readonly emailIndex: string) {\n    }\n\n    async delete(commerce: Commerce): Promise<void> {\n        const key = composeKey(commerce.id)\n        await this.client.delete({\n            TableName: this.tableName,\n            Key: {\n                partitionKey: key,\n                ...commerce.toPrimitives()\n            }\n        })\n            .promise()\n    }\n\n    async findByEmail(email: EmailVo): Promise<Nullable<Commerce>> {\n        const resp = await this.client.query({\n            TableName: this.tableName,\n            IndexName: this.emailIndex,\n            KeyConditionExpression: \"email = :email\",\n            ExpressionAttributeValues: {\n                \":email\": email.value\n            }\n        })\n            .promise();\n        return resp.Items?.length ? Commerce.fromPrimitives(\n            {\n                ...resp.Items[0] as CommercePrimitives\n            }\n        ) : null;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async findById(id: UuidVo): Promise<Nullable<Commerce>> {\n        const key = composeKey(id),\n            resp = await this.client.get({\n                TableName: this.tableName,\n                Key: {\n                    partitionKey: key\n                }\n            })\n                .promise();\n        return resp.Item ? Commerce.fromPrimitives({ ...resp.Item } as CommercePrimitives) : null;\n    }\n\n    async save(commerce: Commerce): Promise<void> {\n        const key = composeKey(commerce.id);\n        await this.client.put({\n            TableName: this.tableName,\n            Item: {\n                partitionKey: key,\n                ...commerce.toPrimitives()\n            }\n        })\n            .promise();\n    }\n\n}\n"],"version":3}