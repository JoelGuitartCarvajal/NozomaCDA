181b907115b01178f0374d2481b0415c
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Commerce_1 = __importDefault(require("@backoffice-contexts/commerces/domain/Commerce"));
const composeKey = (id) => "commerce:" + id.toString();
class DynamoCommerceRepository {
    constructor(client, tableName, emailIndex) {
        this.client = client;
        this.tableName = tableName;
        this.emailIndex = emailIndex;
    }
    async delete(commerce) {
        const key = composeKey(commerce.id);
        await this.client.delete({
            TableName: this.tableName,
            Key: Object.assign({ partitionKey: key }, commerce.toPrimitives())
        })
            .promise();
    }
    async findByEmail(email) {
        var _a;
        const resp = await this.client.query({
            TableName: this.tableName,
            IndexName: this.emailIndex,
            KeyConditionExpression: "email = :email",
            ExpressionAttributeValues: {
                ":email": email.value
            }
        })
            .promise();
        return ((_a = resp.Items) === null || _a === void 0 ? void 0 : _a.length) ? Commerce_1.default.fromPrimitives(Object.assign({}, resp.Items[0])) : null;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    async findById(id) {
        const key = composeKey(id), resp = await this.client.get({
            TableName: this.tableName,
            Key: {
                partitionKey: key
            }
        })
            .promise();
        return resp.Item ? Commerce_1.default.fromPrimitives(Object.assign({}, resp.Item)) : null;
    }
    async save(commerce) {
        const key = composeKey(commerce.id);
        await this.client.put({
            TableName: this.tableName,
            Item: Object.assign({ partitionKey: key }, commerce.toPrimitives())
        })
            .promise();
    }
}
exports.default = DynamoCommerceRepository;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcGF0cmljay9Eb3dubG9hZHMvTm96b21hQ0RBL3NyYy9jb250ZXh0cy9iYWNrb2ZmaWNlL2NvbW1lcmNlcy9pbmZyYS9wZXJzaXN0ZW5jZS9keW5hbW9kYi9EeW5hbW9Db21tZXJjZVJlcG9zaXRvcnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFHQSw4RkFBc0U7QUFLdEUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFVLEVBQUUsRUFBRSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDL0QsTUFBcUIsd0JBQXdCO0lBQ3pDLFlBQW9CLE1BQXNCLEVBQVcsU0FBaUIsRUFBVyxVQUFrQjtRQUEvRSxXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUFXLGNBQVMsR0FBVCxTQUFTLENBQVE7UUFBVyxlQUFVLEdBQVYsVUFBVSxDQUFRO0lBQ25HLENBQUM7SUFFRCxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQWtCO1FBQzNCLE1BQU0sR0FBRyxHQUFHLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDbkMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUNyQixTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsR0FBRyxrQkFDQyxZQUFZLEVBQUUsR0FBRyxJQUNkLFFBQVEsQ0FBQyxZQUFZLEVBQUUsQ0FDN0I7U0FDSixDQUFDO2FBQ0csT0FBTyxFQUFFLENBQUE7SUFDbEIsQ0FBQztJQUVELEtBQUssQ0FBQyxXQUFXLENBQUMsS0FBYzs7UUFDNUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNqQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDekIsU0FBUyxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzFCLHNCQUFzQixFQUFFLGdCQUFnQjtZQUN4Qyx5QkFBeUIsRUFBRTtnQkFDdkIsUUFBUSxFQUFFLEtBQUssQ0FBQyxLQUFLO2FBQ3hCO1NBQ0osQ0FBQzthQUNHLE9BQU8sRUFBRSxDQUFDO1FBQ2YsT0FBTyxDQUFBLE1BQUEsSUFBSSxDQUFDLEtBQUssMENBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQyxrQkFBUSxDQUFDLGNBQWMsbUJBRXhDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUF1QixFQUU3QyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsNkRBQTZEO0lBQzdELEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBVTtRQUNyQixNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQ3RCLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ3pCLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUztZQUN6QixHQUFHLEVBQUU7Z0JBQ0QsWUFBWSxFQUFFLEdBQUc7YUFDcEI7U0FDSixDQUFDO2FBQ0csT0FBTyxFQUFFLENBQUM7UUFDbkIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxrQkFBUSxDQUFDLGNBQWMsQ0FBQyxrQkFBSyxJQUFJLENBQUMsSUFBSSxDQUF3QixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM5RixDQUFDO0lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFrQjtRQUN6QixNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDbEIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTO1lBQ3pCLElBQUksa0JBQ0EsWUFBWSxFQUFFLEdBQUcsSUFDZCxRQUFRLENBQUMsWUFBWSxFQUFFLENBQzdCO1NBQ0osQ0FBQzthQUNHLE9BQU8sRUFBRSxDQUFDO0lBQ25CLENBQUM7Q0FFSjtBQTFERCwyQ0EwREMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvcGF0cmljay9Eb3dubG9hZHMvTm96b21hQ0RBL3NyYy9jb250ZXh0cy9iYWNrb2ZmaWNlL2NvbW1lcmNlcy9pbmZyYS9wZXJzaXN0ZW5jZS9keW5hbW9kYi9EeW5hbW9Db21tZXJjZVJlcG9zaXRvcnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbWVyY2VSZXBvc2l0b3J5IH0gZnJvbSBcIkBiYWNrb2ZmaWNlLWNvbnRleHRzL2NvbW1lcmNlcy9kb21haW4vQ29tbWVyY2VSZXBvc2l0b3J5XCI7XG5pbXBvcnQgRW1haWxWbyBmcm9tIFwiQHNoYXJlZC9kb21haW4vRW1haWxWb1wiO1xuaW1wb3J0IHsgTnVsbGFibGUgfSBmcm9tIFwiQHNoYXJlZC9kb21haW4vTnVsbGFibGVcIjtcbmltcG9ydCBDb21tZXJjZSBmcm9tIFwiQGJhY2tvZmZpY2UtY29udGV4dHMvY29tbWVyY2VzL2RvbWFpbi9Db21tZXJjZVwiO1xuaW1wb3J0IFV1aWRWbyBmcm9tIFwiQHNoYXJlZC9kb21haW4vVXVpZFZvXCI7XG5pbXBvcnQgeyBEb2N1bWVudENsaWVudCB9IGZyb20gXCJhd3Mtc2RrL2NsaWVudHMvZHluYW1vZGJcIjtcbmltcG9ydCB7IENvbW1lcmNlUHJpbWl0aXZlcyB9IGZyb20gXCJAYmFja29mZmljZS1jb250ZXh0cy9jb21tZXJjZXMvZG9tYWluL0NvbW1lcmNlUHJpbWl0aXZlc1wiO1xuXG5jb25zdCBjb21wb3NlS2V5ID0gKGlkOiBVdWlkVm8pID0+IFwiY29tbWVyY2U6XCIgKyBpZC50b1N0cmluZygpO1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHluYW1vQ29tbWVyY2VSZXBvc2l0b3J5IGltcGxlbWVudHMgQ29tbWVyY2VSZXBvc2l0b3J5IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNsaWVudDogRG9jdW1lbnRDbGllbnQsIHJlYWRvbmx5IHRhYmxlTmFtZTogc3RyaW5nLCByZWFkb25seSBlbWFpbEluZGV4OiBzdHJpbmcpIHtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGUoY29tbWVyY2U6IENvbW1lcmNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGtleSA9IGNvbXBvc2VLZXkoY29tbWVyY2UuaWQpXG4gICAgICAgIGF3YWl0IHRoaXMuY2xpZW50LmRlbGV0ZSh7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHRoaXMudGFibGVOYW1lLFxuICAgICAgICAgICAgS2V5OiB7XG4gICAgICAgICAgICAgICAgcGFydGl0aW9uS2V5OiBrZXksXG4gICAgICAgICAgICAgICAgLi4uY29tbWVyY2UudG9QcmltaXRpdmVzKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5wcm9taXNlKClcbiAgICB9XG5cbiAgICBhc3luYyBmaW5kQnlFbWFpbChlbWFpbDogRW1haWxWbyk6IFByb21pc2U8TnVsbGFibGU8Q29tbWVyY2U+PiB7XG4gICAgICAgIGNvbnN0IHJlc3AgPSBhd2FpdCB0aGlzLmNsaWVudC5xdWVyeSh7XG4gICAgICAgICAgICBUYWJsZU5hbWU6IHRoaXMudGFibGVOYW1lLFxuICAgICAgICAgICAgSW5kZXhOYW1lOiB0aGlzLmVtYWlsSW5kZXgsXG4gICAgICAgICAgICBLZXlDb25kaXRpb25FeHByZXNzaW9uOiBcImVtYWlsID0gOmVtYWlsXCIsXG4gICAgICAgICAgICBFeHByZXNzaW9uQXR0cmlidXRlVmFsdWVzOiB7XG4gICAgICAgICAgICAgICAgXCI6ZW1haWxcIjogZW1haWwudmFsdWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5wcm9taXNlKCk7XG4gICAgICAgIHJldHVybiByZXNwLkl0ZW1zPy5sZW5ndGggPyBDb21tZXJjZS5mcm9tUHJpbWl0aXZlcyhcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAuLi5yZXNwLkl0ZW1zWzBdIGFzIENvbW1lcmNlUHJpbWl0aXZlc1xuICAgICAgICAgICAgfVxuICAgICAgICApIDogbnVsbDtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG4gICAgYXN5bmMgZmluZEJ5SWQoaWQ6IFV1aWRWbyk6IFByb21pc2U8TnVsbGFibGU8Q29tbWVyY2U+PiB7XG4gICAgICAgIGNvbnN0IGtleSA9IGNvbXBvc2VLZXkoaWQpLFxuICAgICAgICAgICAgcmVzcCA9IGF3YWl0IHRoaXMuY2xpZW50LmdldCh7XG4gICAgICAgICAgICAgICAgVGFibGVOYW1lOiB0aGlzLnRhYmxlTmFtZSxcbiAgICAgICAgICAgICAgICBLZXk6IHtcbiAgICAgICAgICAgICAgICAgICAgcGFydGl0aW9uS2V5OiBrZXlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5wcm9taXNlKCk7XG4gICAgICAgIHJldHVybiByZXNwLkl0ZW0gPyBDb21tZXJjZS5mcm9tUHJpbWl0aXZlcyh7IC4uLnJlc3AuSXRlbSB9IGFzIENvbW1lcmNlUHJpbWl0aXZlcykgOiBudWxsO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmUoY29tbWVyY2U6IENvbW1lcmNlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGtleSA9IGNvbXBvc2VLZXkoY29tbWVyY2UuaWQpO1xuICAgICAgICBhd2FpdCB0aGlzLmNsaWVudC5wdXQoe1xuICAgICAgICAgICAgVGFibGVOYW1lOiB0aGlzLnRhYmxlTmFtZSxcbiAgICAgICAgICAgIEl0ZW06IHtcbiAgICAgICAgICAgICAgICBwYXJ0aXRpb25LZXk6IGtleSxcbiAgICAgICAgICAgICAgICAuLi5jb21tZXJjZS50b1ByaW1pdGl2ZXMoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgICAgLnByb21pc2UoKTtcbiAgICB9XG5cbn1cbiJdLCJ2ZXJzaW9uIjozfQ==