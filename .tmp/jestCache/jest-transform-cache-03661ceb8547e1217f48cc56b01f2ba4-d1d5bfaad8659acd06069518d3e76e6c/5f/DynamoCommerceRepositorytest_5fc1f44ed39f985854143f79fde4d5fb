08521e7a1303a900e241f9d552fe5212
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const DynamoCommerceRepository_1 = __importDefault(require("@backoffice-contexts/commerces/infra/persistence/dynamodb/DynamoCommerceRepository"));
const dynamodb_1 = require("aws-sdk/clients/dynamodb");
const Commerce_mother_1 = __importDefault(require("@backoffice-contexts/commerces/mothers/Commerce.mother"));
describe(DynamoCommerceRepository_1.default, () => {
    const TABLE_NAME = "backoffice-jordi-sapes-backoffice-dynamodb-table", EMAIL_INDEX_NAME = "emailIndex";
    let client;
    let repo;
    beforeAll(() => {
        client = new dynamodb_1.DocumentClient();
        // {
        //     endpoint: "http://localhost:4566/",
        //     region: "eu-west-1",
        //     credentials: {
        //         accessKeyId: "test",
        //         secretAccessKey: "test"
        //     }
        // });
        repo = new DynamoCommerceRepository_1.default(client, TABLE_NAME, EMAIL_INDEX_NAME);
    });
    it("should return when query by email", async () => {
        const commerce = Commerce_mother_1.default.random();
        await repo.save(commerce);
        // eslint-disable-next-line one-var
        const found = await repo.findByEmail(commerce.email);
        expect(found)
            .toStrictEqual(commerce);
    });
    // TODO test by id and test when no exists
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvcGF0cmljay9Eb3dubG9hZHMvTm96b21hQ0RBL3NyYy9jb250ZXh0cy9iYWNrb2ZmaWNlL2NvbW1lcmNlcy9pbmZyYS9wZXJzaXN0ZW5jZS9keW5hbW9kYi9EeW5hbW9Db21tZXJjZVJlcG9zaXRvcnkudGVzdC50cyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBLGtKQUEwSDtBQUMxSCx1REFBMEQ7QUFDMUQsNkdBQW9GO0FBRXBGLFFBQVEsQ0FBQyxrQ0FBd0IsRUFBRSxHQUFHLEVBQUU7SUFDcEMsTUFBTSxVQUFVLEdBQUcsa0RBQWtELEVBQ2pFLGdCQUFnQixHQUFHLFlBQVksQ0FBQztJQUNwQyxJQUFJLE1BQXNCLENBQUM7SUFDM0IsSUFBSSxJQUE4QixDQUFDO0lBQ25DLFNBQVMsQ0FBQyxHQUFHLEVBQUU7UUFDWCxNQUFNLEdBQUcsSUFBSSx5QkFBYyxFQUFFLENBQUE7UUFFN0IsSUFBSTtRQUNKLDBDQUEwQztRQUMxQywyQkFBMkI7UUFDM0IscUJBQXFCO1FBQ3JCLCtCQUErQjtRQUMvQixrQ0FBa0M7UUFDbEMsUUFBUTtRQUNSLE1BQU07UUFDTixJQUFJLEdBQUcsSUFBSSxrQ0FBd0IsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDOUUsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDL0MsTUFBTSxRQUFRLEdBQUcseUJBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUN6QyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFMUIsbUNBQW1DO1FBQ25DLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFckQsTUFBTSxDQUFDLEtBQUssQ0FBQzthQUNSLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNqQyxDQUFDLENBQUMsQ0FBQztJQUNILDBDQUEwQztBQUM5QyxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS9wYXRyaWNrL0Rvd25sb2Fkcy9Ob3pvbWFDREEvc3JjL2NvbnRleHRzL2JhY2tvZmZpY2UvY29tbWVyY2VzL2luZnJhL3BlcnNpc3RlbmNlL2R5bmFtb2RiL0R5bmFtb0NvbW1lcmNlUmVwb3NpdG9yeS50ZXN0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEeW5hbW9Db21tZXJjZVJlcG9zaXRvcnkgZnJvbSBcIkBiYWNrb2ZmaWNlLWNvbnRleHRzL2NvbW1lcmNlcy9pbmZyYS9wZXJzaXN0ZW5jZS9keW5hbW9kYi9EeW5hbW9Db21tZXJjZVJlcG9zaXRvcnlcIjtcbmltcG9ydCB7IERvY3VtZW50Q2xpZW50IH0gZnJvbSBcImF3cy1zZGsvY2xpZW50cy9keW5hbW9kYlwiO1xuaW1wb3J0IENvbW1lcmNlTW90aGVyIGZyb20gXCJAYmFja29mZmljZS1jb250ZXh0cy9jb21tZXJjZXMvbW90aGVycy9Db21tZXJjZS5tb3RoZXJcIjtcblxuZGVzY3JpYmUoRHluYW1vQ29tbWVyY2VSZXBvc2l0b3J5LCAoKSA9PiB7XG4gICAgY29uc3QgVEFCTEVfTkFNRSA9IFwiYmFja29mZmljZS1qb3JkaS1zYXBlcy1iYWNrb2ZmaWNlLWR5bmFtb2RiLXRhYmxlXCIsXG4gICAgICAgIEVNQUlMX0lOREVYX05BTUUgPSBcImVtYWlsSW5kZXhcIjtcbiAgICBsZXQgY2xpZW50OiBEb2N1bWVudENsaWVudDtcbiAgICBsZXQgcmVwbzogRHluYW1vQ29tbWVyY2VSZXBvc2l0b3J5O1xuICAgIGJlZm9yZUFsbCgoKSA9PiB7XG4gICAgICAgIGNsaWVudCA9IG5ldyBEb2N1bWVudENsaWVudCgpXG5cbiAgICAgICAgLy8ge1xuICAgICAgICAvLyAgICAgZW5kcG9pbnQ6IFwiaHR0cDovL2xvY2FsaG9zdDo0NTY2L1wiLFxuICAgICAgICAvLyAgICAgcmVnaW9uOiBcImV1LXdlc3QtMVwiLFxuICAgICAgICAvLyAgICAgY3JlZGVudGlhbHM6IHtcbiAgICAgICAgLy8gICAgICAgICBhY2Nlc3NLZXlJZDogXCJ0ZXN0XCIsXG4gICAgICAgIC8vICAgICAgICAgc2VjcmV0QWNjZXNzS2V5OiBcInRlc3RcIlxuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KTtcbiAgICAgICAgcmVwbyA9IG5ldyBEeW5hbW9Db21tZXJjZVJlcG9zaXRvcnkoY2xpZW50LCBUQUJMRV9OQU1FLCBFTUFJTF9JTkRFWF9OQU1FKTtcbiAgICB9KTtcblxuICAgIGl0KFwic2hvdWxkIHJldHVybiB3aGVuIHF1ZXJ5IGJ5IGVtYWlsXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgY29tbWVyY2UgPSBDb21tZXJjZU1vdGhlci5yYW5kb20oKTtcbiAgICAgICAgYXdhaXQgcmVwby5zYXZlKGNvbW1lcmNlKTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgb25lLXZhclxuICAgICAgICBjb25zdCBmb3VuZCA9IGF3YWl0IHJlcG8uZmluZEJ5RW1haWwoY29tbWVyY2UuZW1haWwpO1xuXG4gICAgICAgIGV4cGVjdChmb3VuZClcbiAgICAgICAgICAgIC50b1N0cmljdEVxdWFsKGNvbW1lcmNlKTtcbiAgICB9KTtcbiAgICAvLyBUT0RPIHRlc3QgYnkgaWQgYW5kIHRlc3Qgd2hlbiBubyBleGlzdHNcbn0pO1xuIl0sInZlcnNpb24iOjN9