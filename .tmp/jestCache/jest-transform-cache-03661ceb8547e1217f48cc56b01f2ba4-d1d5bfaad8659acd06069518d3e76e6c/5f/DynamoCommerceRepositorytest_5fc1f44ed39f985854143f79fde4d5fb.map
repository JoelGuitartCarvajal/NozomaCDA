{"file":"/home/patrick/Downloads/NozomaCDA/src/contexts/backoffice/commerces/infra/persistence/dynamodb/DynamoCommerceRepository.test.ts","mappings":";;;;;AAAA,kJAA0H;AAC1H,uDAA0D;AAC1D,6GAAoF;AAEpF,QAAQ,CAAC,kCAAwB,EAAE,GAAG,EAAE;IACpC,MAAM,UAAU,GAAG,kDAAkD,EACjE,gBAAgB,GAAG,YAAY,CAAC;IACpC,IAAI,MAAsB,CAAC;IAC3B,IAAI,IAA8B,CAAC;IACnC,SAAS,CAAC,GAAG,EAAE;QACX,MAAM,GAAG,IAAI,yBAAc,EAAE,CAAA;QAE7B,IAAI;QACJ,0CAA0C;QAC1C,2BAA2B;QAC3B,qBAAqB;QACrB,+BAA+B;QAC/B,kCAAkC;QAClC,QAAQ;QACR,MAAM;QACN,IAAI,GAAG,IAAI,kCAAwB,CAAC,MAAM,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;IAC9E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;QAC/C,MAAM,QAAQ,GAAG,yBAAc,CAAC,MAAM,EAAE,CAAC;QACzC,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAE1B,mCAAmC;QACnC,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAErD,MAAM,CAAC,KAAK,CAAC;aACR,aAAa,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC,CAAC,CAAC;IACH,0CAA0C;AAC9C,CAAC,CAAC,CAAC","names":[],"sources":["/home/patrick/Downloads/NozomaCDA/src/contexts/backoffice/commerces/infra/persistence/dynamodb/DynamoCommerceRepository.test.ts"],"sourcesContent":["import DynamoCommerceRepository from \"@backoffice-contexts/commerces/infra/persistence/dynamodb/DynamoCommerceRepository\";\nimport { DocumentClient } from \"aws-sdk/clients/dynamodb\";\nimport CommerceMother from \"@backoffice-contexts/commerces/mothers/Commerce.mother\";\n\ndescribe(DynamoCommerceRepository, () => {\n    const TABLE_NAME = \"backoffice-jordi-sapes-backoffice-dynamodb-table\",\n        EMAIL_INDEX_NAME = \"emailIndex\";\n    let client: DocumentClient;\n    let repo: DynamoCommerceRepository;\n    beforeAll(() => {\n        client = new DocumentClient()\n\n        // {\n        //     endpoint: \"http://localhost:4566/\",\n        //     region: \"eu-west-1\",\n        //     credentials: {\n        //         accessKeyId: \"test\",\n        //         secretAccessKey: \"test\"\n        //     }\n        // });\n        repo = new DynamoCommerceRepository(client, TABLE_NAME, EMAIL_INDEX_NAME);\n    });\n\n    it(\"should return when query by email\", async () => {\n        const commerce = CommerceMother.random();\n        await repo.save(commerce);\n\n        // eslint-disable-next-line one-var\n        const found = await repo.findByEmail(commerce.email);\n\n        expect(found)\n            .toStrictEqual(commerce);\n    });\n    // TODO test by id and test when no exists\n});\n"],"version":3}